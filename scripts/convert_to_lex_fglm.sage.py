

# This file was *autogenerated* from the file scripts/convert_to_lex_fglm.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2)
import sys

def read_groebner_basis_file(result_file):
    with open(result_file, 'r') as f:
        lines = f.readlines()
        variables = None
        p = None
        polys = []
        for i, line in enumerate(lines):
            if line.startswith("# Variables:"):
                variables = [v.strip() for v in line.split(":",_sage_const_1 )[_sage_const_1 ].split(",")]
            elif line.startswith("# Field characteristic:"):
                p = int(line.split(":")[_sage_const_1 ].strip())
            elif line.startswith("# Field: GF("):
                # Handles lines like "# Field: GF(17)"
                p = int(line.split("GF(")[_sage_const_1 ].split(")")[_sage_const_0 ].strip())
            elif line.startswith("# --- Groebner basis ---"):
                basis_start = i + _sage_const_1 
                break
        else:
            raise ValueError("Could not find basis start in file.")

    # The rest are basis polynomials
    for line in lines[basis_start:]:
        s = line.strip()
        if s:
            polys.append(s)
    return variables, p, polys

def main():
    if len(sys.argv) != _sage_const_2 :
        print("Usage: sage scripts/convert_to_lex_fglm.sage path/to/result_file.txt")
        sys.exit(_sage_const_1 )
    result_file = sys.argv[_sage_const_1 ]
    variables, p, polys = read_groebner_basis_file(result_file)
    print(f"Inferred variables: {variables}")
    print(f"Field characteristic: {p}")

    # Construct polynomial ring in LEX order
    R_lex = PolynomialRing(GF(p), variables, order='lex')
    # Parse polynomials into the ring
    G_lex = [R_lex(s) for s in polys]
    I_lex = Ideal(G_lex)
    # Compute Groebner basis in LEX using Singularâ€™s FGLM
    G_lex_fglm = I_lex.groebner_basis(algorithm="singular:stdfglm")
    print("\nLEX Groebner basis via FGLM:")
    for g in G_lex_fglm:
        print(g)
    # Save to file
    lex_outfile = result_file.replace(".txt", "_LEX.txt")
    with open(lex_outfile, "w") as out:
        out.write(f"# Lex Groebner basis for {result_file}\n")
        out.write(f"# Field: GF({p})\n")
        for g in G_lex_fglm:
            out.write(str(g) + "\n")
    
    print(f"\nSaved to {lex_outfile}")

if __name__ == "__main__":
    main()

